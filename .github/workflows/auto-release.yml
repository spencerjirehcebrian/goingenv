name: Auto Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/pages.yml'
      - 'index.html'

permissions:
  contents: write
  packages: read

# Ensure only one auto-release runs at a time
concurrency:
  group: auto-release-main
  cancel-in-progress: false

jobs:
  check-ci:
    name: Wait for CI Completion
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check-commit.outputs.should-release }}
      next-version: ${{ steps.calculate-version.outputs.next-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check commit message for release flags
      id: check-commit
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        echo "Commit message: $COMMIT_MSG"
        
        # Check for skip release flag
        if echo "$COMMIT_MSG" | grep -q '\[skip-release\]'; then
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "üö´ Release skipped due to [skip-release] flag"
          exit 0
        fi
        
        # Check for version override flags
        if echo "$COMMIT_MSG" | grep -q '\[major\]'; then
          echo "version-type=major" >> $GITHUB_OUTPUT
          echo "üìà Major version bump requested"
        elif echo "$COMMIT_MSG" | grep -q '\[minor\]'; then
          echo "version-type=minor" >> $GITHUB_OUTPUT
          echo "üìà Minor version bump requested"
        else
          echo "version-type=patch" >> $GITHUB_OUTPUT
          echo "üìà Patch version bump (default)"
        fi
        
        echo "should-release=true" >> $GITHUB_OUTPUT

    - name: Wait for CI to complete
      if: steps.check-commit.outputs.should-release == 'true'
      uses: lewagon/wait-on-check-action@v1.3.1
      with:
        ref: ${{ github.sha }}
        check-name: 'Test'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 30
        allowed-conclusions: success

    - name: Wait for additional CI jobs
      if: steps.check-commit.outputs.should-release == 'true'
      uses: lewagon/wait-on-check-action@v1.3.1
      with:
        ref: ${{ github.sha }}
        check-name: 'Lint'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 30
        allowed-conclusions: success

    - name: Wait for build job
      if: steps.check-commit.outputs.should-release == 'true'
      uses: lewagon/wait-on-check-action@v1.3.1
      with:
        ref: ${{ github.sha }}
        check-name: 'Build'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 30
        allowed-conclusions: success

    - name: Wait for security job
      if: steps.check-commit.outputs.should-release == 'true'
      uses: lewagon/wait-on-check-action@v1.3.1
      with:
        ref: ${{ github.sha }}
        check-name: 'Security'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 30
        allowed-conclusions: success

    - name: Calculate next version
      if: steps.check-commit.outputs.should-release == 'true'
      id: calculate-version
      run: |
        VERSION_TYPE="${{ steps.check-commit.outputs.version-type }}"
        
        # Get latest stable release tag
        LATEST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
        
        if [[ -z "$LATEST_TAG" ]]; then
          echo "No previous stable releases found, starting with v1.0.0"
          NEXT_VERSION="1.0.0"
        else
          echo "Latest stable release: $LATEST_TAG"
          
          # Extract version numbers
          CURRENT_VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Calculate next version based on type
          case "$VERSION_TYPE" in
            major)
              NEXT_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEXT_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
            *)
              echo "‚ùå Invalid version type: $VERSION_TYPE"
              exit 1
              ;;
          esac
        fi
        
        echo "next-version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "üì¶ Next version will be: v$NEXT_VERSION"
        
        # Check if this version already exists
        if git tag | grep -q "^v$NEXT_VERSION$"; then
          echo "‚ùå Version v$NEXT_VERSION already exists!"
          exit 1
        fi
        
        echo "‚úÖ Version v$NEXT_VERSION is available"

  create-release:
    name: Create Automatic Release
    runs-on: ubuntu-latest
    needs: check-ci
    if: needs.check-ci.outputs.should-release == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Run pre-release checks
      run: |
        echo "üîç Running pre-release validation..."
        
        # Ensure working directory is clean
        if ! git diff-index --quiet HEAD --; then
          echo "‚ùå Working directory is not clean"
          git status
          exit 1
        fi
        
        # Verify we're on main branch
        CURRENT_BRANCH=$(git branch --show-current)
        if [[ "$CURRENT_BRANCH" != "main" ]]; then
          echo "‚ùå Not on main branch (current: $CURRENT_BRANCH)"
          exit 1
        fi
        
        echo "‚úÖ Pre-release checks passed"

    - name: Create release tag
      run: |
        VERSION="v${{ needs.check-ci.outputs.next-version }}"
        echo "üè∑Ô∏è Creating release tag: $VERSION"
        
        # Create annotated tag with release information
        git tag -a "$VERSION" -m "Automatic release $VERSION

        Released from main branch
        Commit: ${{ github.sha }}
        Triggered by: ${{ github.event.head_commit.message }}
        
        ü§ñ This release was created automatically by GitHub Actions"
        
        # Push the tag to trigger release workflow
        git push origin "$VERSION"
        
        echo "‚úÖ Tag $VERSION created and pushed"

    - name: Create release summary
      run: |
        VERSION="v${{ needs.check-ci.outputs.next-version }}"
        echo "üéâ Automatic release triggered!"
        echo ""
        echo "üì¶ Version: $VERSION"
        echo "üåü Release URL: https://github.com/${{ github.repository }}/releases/tag/$VERSION"
        echo "üîÑ Monitor release progress: https://github.com/${{ github.repository }}/actions"
        echo ""
        echo "The release workflow will now:"
        echo "‚úÖ Build binaries for all platforms"
        echo "‚úÖ Run comprehensive quality gates"
        echo "‚úÖ Create GitHub release with assets"
        echo "‚úÖ Validate installation scripts"
        echo ""
        echo "üì• Installation command:"
        echo "curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash"

  notify-failure:
    name: Notify Auto-Release Failure
    runs-on: ubuntu-latest
    needs: [check-ci, create-release]
    if: failure()
    steps:
    - name: Failure notification
      run: |
        echo "‚ùå Automatic release failed!"
        echo ""
        echo "üîç Check the workflow logs for details:"
        echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "Common issues:"
        echo "- CI jobs failed or are still running"
        echo "- Version calculation failed"
        echo "- Tag already exists"
        echo "- Git configuration issues"
        echo ""
        echo "üí° To skip automatic releases, include [skip-release] in commit message"
        echo "üí° To control version bump, use [major], [minor], or leave blank for patch"